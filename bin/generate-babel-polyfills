#!/usr/bin/env node

const commander = require('commander')
const { promisify } = require('util')
const { mkdir: mkdirOrig } = require('fs')
const { spawn } = require('child_process')
const { version, description } = require('../package.json')

const mkdir = promisify(mkdirOrig)

commander
  .version(version)
  .description(description)
  .usage('[options] <directory>')
  .option('-n, --name <file name>', 'file name of the generated script', 'babel-polyfills')
  .on('--help', () => {
    console.log()
    console.log('  The full and minified files with source maps will be written to the specified')
    console.log('  directory. The extension ".js" will be appended to the file name.')
    console.log()
    console.log('Examples:')
    console.log()
    console.log('  $ generate-babel-polyfills dist')
    console.log('  $ generate-babel-polyfills -n polyfills dist')
  })
  .parse(process.argv)

const target = commander.args[0]
if (!target) {
  commander.help()
}

const { name } = commander.opts()
const source = process.env['BABEL_POLYFILLS_GENERATOR_TEST'] ? '.' :
  'node_modules/babel-polyfills-generator'

const run = (command, args) => {
  return new Promise((resolve, reject) => {
    const proc = spawn(command, args)
      .on('error', err => (console.error(err), reject()))
      .on('exit', code => code ? reject() : resolve())
    proc.stdout.on('data', data => process.stdout.write(data.toString()))
    proc.stderr.on('data', data => process.stderr.write(data.toString()))
  })
}

const generate = async () => {
  await mkdir(target, { recursive: true })
  await run('rollup', [
    '-p', '@rollup/plugin-commonjs', '-p', '@rollup/plugin-node-resolve',
    '-f', 'iife', '--sourcemap', '-o', `${target}/${name}.js`,
    `${source}/lib/babel-polyfills.src.js`
  ])
  await run('terser', [
    '-cm', '--comments false', '--source-map', 'includeSources',
    '--source-map', `url=${name}.min.js.map`,
    '--source-map', `content=${target}/${name}.js.map`,
    '-o', `${target}/${name}.min.js`, `${target}/${name}.js`
  ])
}

generate().catch(error => {
  console.log(error)
  process.exitCode = 1
})
